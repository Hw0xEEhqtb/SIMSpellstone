$font-stack: Helvetica, sans-serif;

/* 
 * Practical Color Theory for People Who Code
 * http://tallys.github.io/color-theory/?imm_mid=0e31ae&cmp=em-web-na-na-newsltr_20160427
 */

// Pick starting hue
$hue: 20;

// Color wheel applied
$red: hsl(355, 100%, 50%);
$orange: hsl(20, 100%, 50%);
$yellow: hsl(60, 100%, 50%);
$green: hsl(120, 100%, 50%);
$cyan: hsl(180, 100%, 50%);
$blue: hsl(240, 100%, 50%);
$violet: hsl(300, 100%, 50%);

// Pick a starting color to mix with and select a hue between 0-360 (check the color wheel!)
$first-color: hsl($hue, 100%, 50%);
//$first-color: gray;

// Find the hue 180 degrees away on the color wheel
$second-color: complement($first-color);

// Check if the color is a cool color
@function is-cool-color($color) {
    @return hue($color) < 300 and hue($color) > 120;
}

// Check if the color is high value or low value
@function is-high-key-value($color) {
    @return hue($color) > 30 and hue($color) < 140;
}

//Establish a relationship (similar lighting conditions) between colors.
@function harmonious-mix($mix, $base) {
    @if (is-cool-color($mix)) {
        @if is-high-key-value($base) {
            @return mix($mix, $base, 11%);
        }
        @else {
            @return mix($mix, $base, 16%);
        }
    }
    @else {
        @if is-high-key-value($base) {
            @return mix($mix, $base, 13%);
        }
        @else {
            @return mix($mix, $base, 23%);
        }
    }
}

// Create neutral colors
@function mix-neutral($color) {
    @if (is-highest-key-value($color)) {
        @if is-high-key-value(complement($color)) {
            @return mix(complement($color), $color, 19%);
        }
        @else {
            @return mix(complement($color), $color, 13%);
        }
    }
    @else if (is-high-key-value($color)) {
        @if is-high-key-value(complement($color)) {
            @return mix(complement($color), $color, 31%);
        }
        @else {
            @return mix(complement($color), $color, 23%);
        }
    }
    @else {
        @if is-highest-key-value(complement($color)) {
            @return mix(complement($color), $color, 31%);
        }

        @if is-high-key-value(complement($color)) {
            @return mix(complement($color), $color, 26%);
        }
        @else {
            @return mix(complement($color), $color, 23%);
        }
    }
}

// Pick contrasting color
@function pick-contrast($color) {
    @if is-high-key-value($color) {
        @if lightness($color) < 30% {
            @return lighten(complement($color), 86);
        }
        @else if lightness($color) > 70% {
            @return darken(complement($color), 68);
        }
        @else {
            @return darken(complement($color), 53);
        }
    }
    @else {
        @if lightness($color) < 30% {
            @return lighten(complement($color), 86);
        }
        @else if lightness($color) > 70% {
            @return darken(complement($color), 68);
        }
        @else {
            @return lighten(complement($color), 53);
        }
    }
}

$primary-color: harmonious-mix($second-color, $first-color);
$secondary-color: harmonious-mix($first-color, $second-color);

$primary-neutral: mix-neutral($primary-color);
$primary-white: harmonious-mix($primary-color, white);
$primary-black: harmonious-mix($primary-color, black);
$primary-tint: harmonious-mix($primary-color, $primary-white);

$secondary-neutral: mix-neutral($secondary-color);
$secondary-white: harmonious-mix($secondary-color, white);
$secondary-white-white: harmonious-mix($secondary-white, white);
$secondary-black: harmonious-mix($secondary-color, black);
$secondary-tint: harmonious-mix($secondary-color, $secondary-white);

.primary-color {
    background-color: $primary-color;
}

.primary-neutral {
    background-color: $primary-neutral;
}

.primary-black {
    background-color: $primary-black;
}

.primary-white {
    background-color: $primary-white;
}

.primary-tint {
    background-color: $primary-tint;
}

.secondary-color {
    background-color: $secondary-color;
}

.secondary-neutral {
    background-color: $secondary-neutral;
}

.secondary-black {
    background-color: $secondary-black;
}

.secondary-white {
    background-color: $secondary-white;
}

.secondary-tint {
    background-color: $secondary-tint;
}

.circle {
    color: black;
    border: 1px solid black;
    min-width: 12px;
}

h1, h2, h3, h4, h5, h6 {
    padding: 10px;
    margin: 0;
}

div.section {
    border: 2px solid $primary-black;
    border-radius: 10px 10px 0 0;
    padding-bottom: 2px;

    h1, h2, h3, h4, h5, h6 {
        color: $primary-black;
        background-color: $primary-neutral;
        border-radius: 10px 10px 0 0;
        border-bottom: 2px solid $primary-black;
    }
}

select, input {
    color: $secondary-color;
    background-color: $secondary-white-white;
}

body {
    font: 100% $font-stack;
    color: $secondary-neutral;
    background-color: white;
}


.accordion {
    .ui-accordion-header {
        position: relative;
    }
    
    h6.ui-accordion-header,
    span.ui-accordion-header {
        color: $primary-black;
        border-color: $secondary-tint;
        background-color: $secondary-white;
        border-style: outset;
        border-radius: 5px 5px 0 0;
        margin: 0;
    }

    > div {
        border: 1px solid $primary-black;
    }
}

select[disabled] {
    //background-color: rgb(235, 235, 228);
    color: $secondary-color;
    background-color: $secondary-tint;
}

.black {
    //color: #001;
    color: $secondary-neutral;
}

.grey {
    //color: #888;
    color: $secondary-tint;
}

option.location:disabled {
    color: $secondary-black;
    background-color: $secondary-tint;
    font-weight: bold;
}

select.mythic,
option.mythic {
    color: darkorange;
}

select.heroUpgrade,
option.heroUpgrade {
    color: purple;
}

thead tr {
    background-color: black;
    color: white;
}

tr.alternating:nth-child(odd) {
    background-color: lightgrey;
}

#version_label {
    background-color: $secondary-black;
}

input[type=button] {
    border-color: $secondary-tint;
    background-color: $secondary-white;
    border-radius: 5px;
    border-width: 3px;
    padding: 5px 10px;
    margin: 5px 0;
}

/* states and images */
.ui-icon {
    width: 16px;
    height: 16px;
}

.ui-icon,
.ui-widget-content .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_222222_256x240.png");
}

.ui-widget-header .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_222222_256x240.png");
}

.ui-state-default .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_888888_256x240.png");
}

.ui-state-hover .ui-icon,
.ui-state-focus .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_454545_256x240.png");
}

.ui-state-active .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_454545_256x240.png");
}

.ui-state-highlight .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_2e83ff_256x240.png");
}

.ui-state-error .ui-icon,
.ui-state-error-text .ui-icon {
    background-image: url("../../Content/themes/base/images/ui-icons_cd0a0a_256x240.png");
}

.ui-accordion .ui-accordion-icons {
    padding-left: 2.2em;
}

.ui-accordion .ui-accordion-icons .ui-accordion-icons {
    padding-left: 2.2em;
}

.ui-accordion .ui-accordion-header .ui-accordion-header-icon {
    position: absolute;
    left: .5em;
    top: 50%;
    margin-top: -8px;
}

.ui-icon-triangle-1-e {
    background-position: -32px -16px;
}

.ui-icon-triangle-1-s {
    background-position: -64px -16px;
}

h2 .ui-icon {
    -moz-transform: scale(1.5);
    -ms-transform: scale(1.5);
    -o-transform: scale(1.5);
    -webkit-transform: scale(1.5);
    transform: scale(1.5);
}

.label {
    font-weight: bold;
    background-color: $secondary-tint;
}


#content {
    i {
        text-decoration: none;
        font-style: normal;
        color: #ff0000;
        font-weight: bold;
    }

    b {
        text-decoration: none;
        font-style: normal;
        color: #0000ff;
        font-weight: bold;
    }
}
