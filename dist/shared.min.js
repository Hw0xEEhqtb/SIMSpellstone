!function(){var modules={};function getModule(name){var module=modules[name];if(module)return module;throw"Module '"+name+"' is not defined yet."}window.define=function(name,dependencies,moduleDefinition){var injectables=dependencies.map(function(name){return getModule(name)});modules[name]=moduleDefinition.apply(this,injectables)},window.require=function(name){return getModule(name)}}(),"function"!=typeof Object.assign&&(Object.assign=function(target){"use strict";if(null==target)throw new TypeError("Cannot convert undefined or null to object");target=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(null!=source)for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}),Function.prototype.debounce=function(wait){var timeout,func=this;return function(){var context=this,args=arguments;clearTimeout(timeout),timeout=setTimeout(function(){timeout=null,func.apply(context,args)},wait)}},Function.prototype.throttle=function(wait){var timeout,func=this;return function(){var context=this,args=arguments;if(!timeout){func.apply(context,args);timeout=setTimeout(function(){timeout=null,func.apply(context,args)},wait)}}},define("factions",[],function(){return{names:{0:"Factionless",1:"Aether",2:"Chaos",3:"Wyld",4:"Frog",5:"Elemental",6:"Angel",7:"Undead",8:"Void",9:"Dragon",10:"Avian",11:"Goblin",12:"Seafolk",13:"Insect",14:"Bear",15:"Token",16:"Mecha",17:"Knight",999:"Tower"},IDs:{Factionless:0,Aether:1,Chaos:2,Wyld:3,Frog:4,Elemental:5,Angel:6,Undead:7,Void:8,Dragon:9,Avian:10,Goblin:11,Seafolk:12,Insect:13,Bear:14,Token:15,Mecha:16,Knight:17,Tower:999}}}),define("skillApi",[],function(){function setSkill(new_card,skill){var skillID=skill.id;switch(SKILL_DATA[skillID].type){case"toggle":return void(new_card[skillID]=!0);case"passive":new_card[skill.id]=(0|new_card[skill.id])+skill.x;break;case"flurry":new_card[skill.id]=skill;break;case"onDeath":new_card.onDeathSkills.push(skill);break;case"earlyActivation":new_card.earlyActivationSkills.push(skill);break;case"activation":default:new_card.skill.push(skill)}}function copySkill(original_skill){var new_skill={};return new_skill.id=original_skill.id,new_skill.x=original_skill.x,new_skill.mult=original_skill.mult,new_skill.on_delay_mult=original_skill.on_delay_mult,new_skill.all=original_skill.all,new_skill.y=original_skill.y,new_skill.z=original_skill.z,new_skill.c=original_skill.c,new_skill.s=original_skill.s,new_skill}return{setSkill:setSkill,copySkill:copySkill,copySkills:function(new_card,original_skills,mult){new_card.skill=[],new_card.earlyActivationSkills=[],new_card.onDeathSkills=[];var skillTimers=[],reusable=!0;for(var key in original_skills){var newSkill=original_skills[key];if(newSkill.c){var copiedSkill=copySkill(newSkill);setSkill(new_card,copiedSkill),skillTimers.push(copiedSkill),reusable=!1}else if(mult){var copiedSkill=copySkill(newSkill);copiedSkill.x=Math.ceil(copiedSkill.x*mult),setSkill(new_card,copiedSkill)}else setSkill(new_card,newSkill)}new_card.reusableSkills=reusable,new_card.skillTimers=skillTimers},nameFromId:function(skillID){var skillData=SKILL_DATA[skillID];return skillData?skillData.name:skillID}}}),define("runeApi",[],function(){function getRune(rune_id){return RUNES[rune_id]}return{addRunes:function(card,runes){card.runes||(card.runes=[]);for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=getRune(runeID).stat_boost;for(var key in card.runes.push({id:runeID,stat_boost:statBoost}),statBoost){var boost=statBoost[key];"skill"===key||(isNaN(boost)&&(boost=Math.max(Math.ceil(card[key]*boost.mult),boost.min_bonus||1)),card[key]+=parseInt(boost))}}},canUseRune:function(card,rune){var statBoost=rune.stat_boost;if(rune.faction_req&&!card.isInFaction(rune.faction_req))return!1;for(var key in statBoost)if("skill"===key){var skillBoost=statBoost[key],all=skillBoost.all||"0";if(!card.hasSkill(skillBoost.id,all))return!1}return!0},getRune:getRune}}),define("cardInfo",[],function(){function loadCard(id){return CARDS[id]}return{loadCard:loadCard,isCommander:function(id){var card=loadCard(id);return card&&"1"===card.card_type},isAssault:function(id){var card=loadCard(id);return card&&"2"===card.card_type},isTrap:function(id){var card=loadCard(id);return card&&"3"===card.card_type}}}),define("matchTimer",[],function(){function elapsedSeconds(start,end){return((end-start)/1e3).toFixed(3)}return{elapsed:function(){var end=this.timeStop||Date.now();return elapsedSeconds(this.timeStart,end)},batchElapsed:function(start){return function(start){return elapsedSeconds(start,Date.now())}(start||this.batchStarted)},startBatch:function(){this.batchStarted=Date.now()},stop:function(){this.timeStop=Date.now()},reset:function(){this.timeStart=Date.now(),this.timeStop=0}}}),define("urlHelper",[],function(){"use strict";function getRawParamValue(paramName){for(var vars=window.location.search.substring(1).split("&"),i=0;i<vars.length;i++){var pair=vars[i].split("=");if(decodeURIComponent(pair[0])===paramName)return pair[1]}return null}return{paramDefined:function(paramName){return null!==getRawParamValue(paramName)},paramValue:function(paramName){var value=getRawParamValue(paramName);return decodeURIComponent(value||"")},getCurrentPage:function(){var currentPage=window.location.href,pageEnd=currentPage.indexOf(".html"),pageStart=(currentPage=currentPage.substring(0,pageEnd)).lastIndexOf("/")+1;return currentPage=currentPage.substring(pageStart).toLowerCase()}}}),define("storageAPI",["urlHelper"],function(urlHelper){"use strict";var $loadDialogScope,storageAPI={},SaveFields_decks="SavedDecks";return!function(){try{var storage=window.localStorage,x="__storage_test__";return storage.setItem(x,x),storage.removeItem(x),!0}catch(e){return!1}}()?function(){storageAPI.initialize=function(){storageAPI.getSavedDecks=function(){return{}},storageAPI.loadDeck=notSupported,storageAPI.deleteDeck=notSupported,storageAPI.clearDecks=notSupported,storageAPI.getField=function(storageName,fieldName,defaultValue){return defaultValue},storageAPI.setField=function(){},storageAPI.savedDecks={},storageAPI.setShowTutorial=function(value){storageAPI.shouldShowTutorial=value},storageAPI.shouldShowTutorial=!0};var notSupported=function(){alert("Your browser does not support this feature.")}}():function(){var SaveFields_decks="SavedDecks",SaveFields_tutorial="Tutorial";function getStorage(storageName){var storage=localStorage.getItem(storageName);if(storage)try{storage=JSON.parse(storage)}catch(err){storage={}}else storage={};return storageAPI.data[storageName]=storage}storageAPI.initialize=function(){var storage,currentPage=urlHelper.getCurrentPage();void 0===(storage=getStorage(SaveFields_decks)).savedDecks&&storageAPI.setField(SaveFields_decks,"savedDecks",storage),storageAPI.getField(SaveFields_decks,"savedDecks",{}),storageAPI.shouldShowTutorial=storageAPI.getField(SaveFields_tutorial,currentPage,!0)[currentPage];var cachedOnUpdate=storageAPI.onUpdateDecks;storageAPI.onUpdateDecks=function(savedDecks){cachedOnUpdate(),storageAPI.setField(SaveFields_decks,"savedDecks",savedDecks)},storageAPI.setShowTutorial=function(value){storageAPI.shouldShowTutorial=value,storageAPI.setField(SaveFields_tutorial,currentPage,value)}},storageAPI.getField=function(storageName,fieldName,defaultValue){var value=getStorage(storageName)[fieldName];return void 0===value&&(value=defaultValue,storageAPI.setField(storageName,fieldName,value)),value},storageAPI.setField=function(storageName,fieldName,newValue){var storage=getStorage(storageName);storage[fieldName]=newValue,localStorage.setItem(storageName,JSON.stringify(storage))},window.addEventListener("storage",function(e){"__storage_test__"!==e.key&&localStorage.getItem(e.key)!==e.newValue&&angular.element("#loadDeckDialog").scope().$apply(localStorage.setItem(e.key,e.newValue))})}(),storageAPI.data={},storageAPI.getSavedDecks=function(){return storageAPI.getField(SaveFields_decks,"savedDecks",{})},storageAPI.saveDeck=function(name,hash){var savedDecks=storageAPI.getSavedDecks();savedDecks[name]=hash,storageAPI.onUpdateDecks(savedDecks)},storageAPI.loadDeck=function(name){return storageAPI.getSavedDecks()[name]},storageAPI.deleteDeck=function(name){var savedDecks=storageAPI.getSavedDecks();delete savedDecks[name],storageAPI.onUpdateDecks(savedDecks)},storageAPI.clearDecks=function(name){var savedDecks=storageAPI.getSavedDecks();for(var name in savedDecks)delete savedDecks[name];storageAPI.onUpdateDecks(savedDecks)},storageAPI.onUpdateDecks=function(){$loadDialogScope||($loadDialogScope=angular.element("#loadDeckDialog").scope()),$loadDialogScope.$apply()},storageAPI.initialize(),storageAPI}),define("simTutorial",["storageAPI","urlHelper"],function(storageAPI,urlHelper){"use strict";var api={showTutorial:showTutorial,checkTutorial:checkTutorial,registerTutorial:function(newTutorial){var currentPage=urlHelper.getCurrentPage();tutorialParts=newTutorial.filter(function(tutorialPart){return!tutorialPart.showFor||tutorialPart.showFor===currentPage})}},tutorialParts=[],overlayHtml=$("<div></div>");function checkTutorial(){storageAPI.shouldShowTutorial?showTutorial():closeTutorial()}function showTutorial(){tutorialIndex=0,setTutorial(),$("#tutorial").show()}$(function(){$(document.body).append(overlayHtml),overlayHtml.load("templates/tutorial-overlay.html",null,function(){overlayHtml.replaceWith(function(){return $(this).contents()}),$("#tutorial-show").prop("checked",storageAPI.shouldShowTutorial).change(function(){storageAPI.setShowTutorial(this.checked)}),$("#help").click(showTutorial),$("#tutorial-close, #tutorial-skip").click(closeTutorial),$("#tutorial-next").click(nextTutorial),$("#tutorial-prev").click(previousTutorial),"undefined"==typeof delayTutorial&&checkTutorial()})});var uiTimer,tutorialIndex=0;function nextTutorial(){tutorialIndex++,setTutorial()}function previousTutorial(){tutorialIndex--,setTutorial()}function closeTutorial(){$("#tutorial").hide(),$("#tutorial-permahide").is(":checked")&&storageAPI.hideTutorial()}function setTutorial(){clearTimeout(uiTimer);var tutorialPart=tutorialParts[tutorialIndex],actions=tutorialPart.actions;actions&&actions.forEach(function(action){action()});var msg=tutorialPart.msg,uiFocus=tutorialPart.ui;if(uiFocus){var target=$(uiFocus);tutorialPart.dialog&&(target=target.parent()),showUI(target),actions&&(uiTimer=setTimeout(showUI,500,target)),msg.indexOf(!1)&&(msg=msg.replace(/\{0\}/g,target.text()))}else $(".overlay-fog").width(0).height(0);$("#tutorialMessage").text(msg),tutorialIndex<tutorialParts.length-1?($("#tutorial-next").show(),$("#tutorial-close").hide()):($("#tutorial-next").hide(),$("#tutorial-close").show()),0<tutorialIndex?$("#tutorial-prev").removeClass("disabled"):$("#tutorial-prev").addClass("disabled")}function showUI(target){var position=target.offset();$(".overlay-fog").css({top:position.top-2+"px",left:position.left-2+"px"}).width(target.outerWidth()+4+"px").height(target.outerHeight()+4+"px")}return window.showTutorial=showTutorial,window.checkTutorial=checkTutorial,api}),define("loadCardCache",["storageAPI"],function(storageAPI){"use strict";return function(){var cardData=storageAPI.getField("GameData","CardCache");if(cardData&&cardData.lastUpdated>DataUpdated)cardData.newCards&&($.extend(CARDS,cardData.newCards),$.extend(FUSIONS,cardData.newFusions)),DataUpdated=cardData.lastUpdated;else{var CARDS_cache={newCards:{},newFusions:{},lastUpdated:Date.now()};storageAPI.setField("GameData","CardCache",CARDS_cache)}}}),define("dataUpdater",["storageAPI"],function(storageAPI){"use strict";var api={updateData:function(callback,forceUpdate){$("body").addClass("loading"),$("#loadingSplash").html("Checking for New Cards...");var now=Date.now();if(!lastUpdate||6e4<lastUpdate-now||forceUpdate){lastUpdate=now,newCards={};var promises=[];promises.push(function(){for(var promises=[],file=0;file<cardFiles.length;file++){var promise=jQuery.ajax({url:baseUrl+"/assets/"+cardFiles[file],success:function(doc){for(var trackNewCards="undefined"!=typeof spoilers,units=doc.getElementsByTagName("unit"),i=0;i<units.length;i++){var unit=units[i],id=getValue(unit,"id"),cardData=getUnitFromXML(unit),newInfo=!1;CARDS[id]?JSON.stringify(CARDS[id])!==JSON.stringify(cardData)&&(newInfo=!0):newInfo=!0,newInfo&&(trackNewCards&&(spoilers[id]=!0),newCards[id]=cardData),CARDS[id]=cardData}for(var fusions=doc.getElementsByTagName("fusion_recipe"),i=0;i<fusions.length;i++){var node=fusions[i],fusion=getValue(node,"card_id",!1),resource=node.getElementsByTagName("resource")[0];if(resource){var base=getValue(resource,"card_id",!0);FUSIONS[base]&&FUSIONS[base]===fusion||(newFusions[base]=fusion,FUSIONS[base]=fusion)}}},async:!0,cache:!1});promises.push(promise)}return $.when.apply($,promises)}());var finishedLoading=function(){!function(){if(void 0!==storageAPI){var cardData=storageAPI.getField("GameData","CardCache");cardData?(cardData.newCards=cardData.newCards||{},cardData.newFusions=cardData.newFusions||{},$.extend(cardData.newCards,newCards),$.extend(cardData.newFusions,newFusions)):cardData={newCards:newCards,newFusions:newFusions},cardData.lastUpdated=Date.now(),storageAPI.setField("GameData","CardCache",cardData)}}(),$("body").removeClass("loading"),callback&&callback()};$.when.apply($,promises).then(finishedLoading,finishedLoading)}else callback&&callback()}},baseUrl="https://spellstone.synapse-games.com",newCards={},newFusions={},lastUpdate=null;var cardFiles=["cards_heroes.xml","cards_premium_aether.xml","cards_premium_chaos.xml","cards_premium_wyld.xml","cards_reward.xml","cards_shard.xml","cards_special.xml","cards_standard.xml","cards_story.xml","fusion_recipes_cj2.xml"];function getUnitFromXML(node){var unit={};if(unit.id=getValue(node,"id"),unit.name=getValue(node,"name"),addField(unit,node,"desc"),unit.picture=getValue(node,"picture")||function(value,prefix){return value?prefix+value:value}(getValue(node,"asset_prefab"),"prefab_"),!unit.picture){var portrait=getValue(node,"portrait");unit.picture=portrait?"portrait_"+portrait.toLowerCase().replace("portrait_",""):"NotFound"}var hidden_until=getValue(node,"hidden_until")||getValue(node,"hidden_until_time");hidden_until&&(unit.hidden_until=hidden_until+"000"),unit.rarity=getValue(node,"rarity"),unit.set=getValue(node,"set"),unit.card_type=getValue(node,"card_type"),addNumericField(unit,node,"shard_card"),unit.type=getValue(node,"type")||"0",unit.sub_type=getValues(node,"sub_type")||[],addNumericField(unit,node,"health"),"1"!==unit.card_type&&(addNumericField(unit,node,"attack"),addNumericField(unit,node,"cost"));var upgrades=function(node){for(var nodes=node.getElementsByTagName("upgrade"),upgrades={},i=0;i<nodes.length;i++)upgrades[i+2]=getUpgradeFromXML(nodes[i]);return upgrades}(node);return unit.maxLevel=1+Object.keys(upgrades).length,unit.skill=getSkillsFromXML(node),unit.upgrades=upgrades,unit}function getSkillsFromXML(node){for(var children=node.childNodes,skills=[],i=0;i<children.length;i++){var child=children[i];"skill"===child.nodeName&&skills.push(getSkillFromXML(child))}return skills}function getSkillFromXML(node){var skill={id:getValue(node,"id",!0)};return addNumericField(skill,node,"x",!0),addNumericField(skill,node,"mult",!0),addNumericField(skill,node,"on_delay_mult",!0),addField(skill,node,"y",!0),addNumericField(skill,node,"z",!0),addNumericField(skill,node,"c",!0),addField(skill,node,"s",!0),addField(skill,node,"all",!0),skill}function getUpgradeFromXML(node){var upgrade={};return addNumericField(upgrade,node,"attack"),addNumericField(upgrade,node,"health"),addNumericField(upgrade,node,"cost"),addField(upgrade,node,"desc"),upgrade.skill=getSkillsFromXML(node),upgrade}function addField(object,node,field,isAtt){var value=getValue(node,field,isAtt);null!=value&&0<value.length&&(object[field]=value)}function addNumericField(object,node,field,isAtt){var value=function(node,tagName,isAtt){var value=getValue(node,tagName,isAtt);return null!=value?Number(value):-1}(node,field,isAtt);0<=value&&(object[field]=value)}function getValue(node,name,isAtt){if(isAtt)return node.getAttribute(name);var values=getValues(node,name);return values?values[0]:null}function getValues(node,name){var values=null,tags=$(node).children(name);if(0<tags.length){values=[];for(var i=0;i<tags.length;i++)values.push(tags[i].textContent)}return values}return api}),define("cardApi",["cardInfo","skillApi","runeApi"],function(cardInfo,skillApi,runeApi){var api={byId:getCardByID,byIdSlim:function(unit,getDetails){var current_card=cardInfo.loadCard(unit.id),new_card={};"1"===current_card.card_type?(new_card.isCommander=function(){return!0},new_card.isAssault=function(){return!1}):(new_card.isCommander=function(){return!1},new_card.isAssault=function(){return!0});if(current_card){if(new_card.id=current_card.id,new_card.name=current_card.name,new_card.rarity=current_card.rarity,new_card.maxLevel=current_card.maxLevel,new_card.level=Math.min(unit.level||1,new_card.maxLevel),getDetails){if(new_card.attack=current_card.attack,new_card.health=current_card.health,new_card.cost=current_card.cost,new_card.set=current_card.set,new_card.card_type=current_card.card_type,new_card.type=current_card.type,new_card.sub_type=current_card.sub_type||[],new_card.skill=current_card.skill,1<new_card.level)for(var key in current_card.upgrades){var upgradeLevel=parseInt(key),upgrade=current_card.upgrades[key];if(void 0!==upgrade.cost&&(new_card.cost=upgrade.cost),void 0!==upgrade.health&&(new_card.health=upgrade.health),void 0!==upgrade.attack&&(new_card.attack=upgrade.attack),void 0!==upgrade.desc&&(new_card.desc=upgrade.desc),0<upgrade.skill.length&&(new_card.skill=upgrade.skill),upgradeLevel===new_card.level)break}var runes=unit.runes;runes&&(new_card.skill=new_card.skill.slice(),addRunes(new_card,runes),addRunesToSkills(new_card.skill,runes))}}else new_card.id=void 0,new_card.name=void 0,new_card.card_type=void 0,new_card.set=void 0,new_card.type=void 0,new_card.sub_type=[],new_card.level=void 0,new_card.maxLevel=void 0,getDetails&&(new_card.skill=[]);return new_card},byIdWithBgeApplied:function(id,battlegrounds,isToken){return battlegrounds=battlegrounds||SIMULATOR.battlegrounds.onCreate,getCardByID(id,battlegrounds,null,isToken)},makeBattleground:makeBattleground,applyDefaultStatuses:applyDefaultStatuses},defaultStatusValues={attack_berserk:0,attack_valor:0,attack_rally:0,attack_weaken:0,attack_corroded:0,corrosion_timer:0,mark_target:0,corroded:0,enfeebled:0,enraged:0,envenomed:0,heartseeker:0,imbued:0,invisible:0,nullified:0,poisoned:0,protected:0,scorched:0,warded:0,jammed:!1,jammedSelf:!1,silenced:!1,valor_triggered:!1,dualstrike_triggered:!1,ondeath_triggered:!1,reanimated:!1};function applyDefaultStatuses(card){for(var status in card.removeImbue(),card.enhanced={},defaultStatusValues)card[status]=defaultStatusValues[status]}function addRunes(card,runes){card.runes||(card.runes=[]);for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=runeApi.getRune(runeID).stat_boost;for(var key in card.runes.push({id:runeID,stat_boost:statBoost}),statBoost){var boost=statBoost[key];"skill"===key||(isNaN(boost)&&(boost=Math.max(Math.ceil(card[key]*boost.mult),boost.min_bonus||1)),card[key]+=boost)}}}function getCardByID(unit,skillModifiers,skillMult,isToken){var current_card=cardInfo.loadCard(unit.id);if(current_card){current_card.skill||(current_card.skill=[]);var card=makeUnit(current_card,unit.level,unit.runes,skillModifiers,skillMult,isToken);return unit.priority&&(card.priority=unit.priority),card}return console.log(unit.id+" not found"),(current_card={}).id=unit.id,current_card.level=unit.level,current_card.name=void 0,current_card.health=void 0,current_card.skill=[],current_card}function addRunesToSkills(skills,runes,runeMult){if(runes)for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=runeApi.getRune(runeID).stat_boost;for(var key in statBoost){var boost=statBoost[key];if("skill"===key)for(var skillID=boost.id,amount=boost.x,mult=boost.mult,s=0;s<skills.length;s++){var skill=skills[s];if(skill.id===skillID&&(skill.all||"0")===(boost.all||"0")){skill=skillApi.copySkill(skill),!amount&&mult&&(amount=Math.ceil(skill.x*mult)),boost.min_bonus&&(amount=Math.max(amount,boost.min_bonus)),amount&&(skill.x+=amount*runeMult),boost.c&&(skill.c-=Math.min(skill.c,boost.c*runeMult)),skill.boosted=!0,skills[s]=skill;break}}}}}var Battleground,makeUnit=function(){var CardPrototype;function getStatBeforeRunes(card,statBase){return getCardByID({id:card.id,level:card.level})[statBase]}function scaleSkills(new_card,skillList,mult){for(var key in skillList){var skill=skillList[key];skill.x&&((skill=skillApi.copySkill(skill)).x+=Math.ceil(skill.x*mult),skill.boosted=!0,skillList[key]=skill,new_card.highlighted.push(skill.id))}}for(var id in CardPrototype={p:null,health_left:0,timer:0,key:void 0,isCommander:function(){return"1"===this.card_type},isAssault:function(){return"2"===this.card_type},isTrap:function(){return"3"===this.card_type},isAlive:function(){return 0<this.health_left},isDamaged:function(){return this.health_left<this.health},isActive:function(){return 0===this.timer},isActiveNextTurn:function(){return this.timer<=1},isInactive:function(){return 1<=this.timer},isUnjammed:function(){return!this.jammed},isUnsilenced:function(){return!this.silenced},imbue:function(skill){this.imbued||(this.imbued={});var imbueSkillsKey,imbued=this.imbued,skillID=skill.id;switch(SKILL_DATA[skillID].type){case"toggle":return this[skillID]=!0,void(this.imbued[skillID]=1);case"passive":return this[skillID]+=parseInt(skill.x),void(this.imbued[skillID]=(this.imbued[skillID]||0)+skill.x);case"flurry":return void(this.flurry||(this.flurry=skill,this.flurry.countdown=0,this.imbued.flurry=!0));case"onDeath":imbueSkillsKey="onDeathSkills";break;case"earlyActivation":imbueSkillsKey="earlyActivationSkills";break;case"activation":default:imbueSkillsKey="skill"}if(void 0===imbued[imbueSkillsKey]){var original=this[imbueSkillsKey];imbued[imbueSkillsKey]=original.length,this[imbueSkillsKey]=original.slice()}this[imbueSkillsKey].push(skill)},scorch:function(amount){var scorched=this.scorched;scorched?(scorched.amount+=amount,scorched.timer=2):this.scorched={amount:amount,timer:2}},removeImbue:function(){var imbue=this.imbued;if(imbue){for(var key in imbue){var imbuement=imbue[key];"skill"===key||"earlyActivationSkills"===key||"onDeathSkills"===key?this[key]=this[key].slice(0,imbuement):this[key]-=imbuement}this.imbued=0}},hasSkill:function(s,all){var target_skills;switch(SKILL_DATA[s].type){case"toggle":case"passive":case"flurry":return this[s];case"onDeath":target_skills=this.onDeathSkills;break;case"earlyActivation":target_skills=this.earlyActivationSkills;break;case"activation":default:target_skills=this.skill}for(var key in target_skills){var skill=target_skills[key];if(skill.id===s&&(void 0===all||skill.all===all))return!0}return!1},hasAttack:function(){return 0<this.adjustedAttack()},attackPlusBuffs:function(){return this.attack+this.attack_rally+this.attack_berserk+this.attack_valor},adjustedAttack:function(){return this.attack+this.attack_rally+this.attack_berserk+this.attack_valor-this.attack_weaken-this.attack_corroded},permanentAttack:function(){return this.attack+this.attack_berserk+this.attack_valor},isInFaction:function(faction){if(void 0===faction)return 1;var factions=faction.split(",");if(factions.length<=1)return this.type===faction?1:0<=this.sub_type.indexOf(faction)?1:0;for(var i=0;i<factions.length;i++)if(!this.isInFaction(factions[i]))return 0;return 1},resetTimers:function(){for(var i=0,len=this.skillTimers.length;i<len;i++)this.skillTimers[i].countdown=0},addRunes:function(runes){addRunes(this,runes)}},SKILL_DATA){var type=SKILL_DATA[id].type;"passive"===type?CardPrototype[id]=0:"toggle"===type&&(CardPrototype[id]=!1)}return applyDefaultStatuses(CardPrototype),function(original_card,unit_level,runes,skillModifiers,skillMult,isToken){unit_level||(unit_level=1);var card=Object.create(CardPrototype);card.id=original_card.id,card.name=original_card.name,card.attack=original_card.attack,card.health=original_card.health,card.maxLevel=original_card.maxLevel,card.level=Math.min(unit_level,card.maxLevel),card.cost=original_card.cost,card.rarity=original_card.rarity,card.card_type=original_card.card_type,card.type=original_card.type,card.sub_type=original_card.sub_type||[],card.set=original_card.set;var original_skills=original_card.skill;if(1<card.level)for(var key in original_card.upgrades){var upgrade=original_card.upgrades[key];if(void 0!==upgrade.cost&&(card.cost=upgrade.cost),void 0!==upgrade.health&&(card.health=upgrade.health),void 0!==upgrade.attack&&(card.attack=upgrade.attack),void 0!==upgrade.desc&&(card.desc=upgrade.desc),0<upgrade.skill.length&&(original_skills=upgrade.skill),parseInt(key)===card.level)break}if(original_skills=original_skills.slice(),skillModifiers&&skillModifiers.length&&function(new_card,original_skills,skillModifiers,isToken){new_card.highlighted=[];for(var i=0;i<skillModifiers.length;i++){var skillModifier=skillModifiers[i];if("statChange"===skillModifier.modifierType&&!isToken)for(var j=0;j<skillModifier.effects.length;j++){var statChange=skillModifier.effects[j];new_card.isInFaction(statChange.y)&&Object.keys(statChange).forEach(function(stat){new_card[stat]=statChange[stat]})}}}(card,0,skillModifiers,isToken),runes){card.addRunes(runes);var runeMult=1;skillModifiers&&skillModifiers.forEach(function(skillModifier){"runeMultiplier"===skillModifier.modifierType&&skillModifier.effects.forEach(function(effect){card.isInFaction(effect.y)&&(runeMult=parseInt(effect.mult))})}),addRunesToSkills(original_skills,runes,runeMult)}else card.runes=[];return skillModifiers&&skillModifiers.length&&function(new_card,original_skills,skillModifiers,isToken){new_card.highlighted=[];for(var i=0;i<skillModifiers.length;i++){var skillModifier=skillModifiers[i];if("evolve_skill"===skillModifier.modifierType)for(var j=0;j<skillModifier.effects.length;j++){var evolution=skillModifier.effects[j];for(var key in original_skills){var skill=original_skills[key];skill.id===evolution.id&&skill.all===evolution.all&&((skill=skillApi.copySkill(skill)).id=evolution.s,skill.boosted=!0,original_skills[key]=skill,new_card.highlighted.push(skill.id))}}else if("add_skill"===skillModifier.modifierType)for(j=0;j<skillModifier.effects.length;j++){var addedSkill=skillModifier.effects[j];if(new_card.isInFaction(addedSkill.y)){if(addedSkill.rarity&&new_card.rarity!==addedSkill.rarity)continue;var new_skill={};if(new_skill.id=addedSkill.id,new_skill.x=addedSkill.x||0,addedSkill.mult)if(addedSkill.base){var base=getStatBeforeRunes(new_card,addedSkill.base);new_skill.x+=Math.ceil(addedSkill.mult*base)}else new_skill.mult=addedSkill.mult;if(new_skill.z=addedSkill.z,new_skill.c=addedSkill.c,new_skill.s=addedSkill.s,new_skill.all=addedSkill.all,addedSkill.card&&(new_skill.card=addedSkill.card),addedSkill.level&&(new_skill.level=addedSkill.level),new_skill.boosted=!0,addedSkill.mult&&addedSkill.base&&0===new_skill.x)continue;original_skills.push(new_skill),new_card.highlighted.push(new_skill.id)}}else if("scale_attributes"!==skillModifier.modifierType||isToken){if("scale_stat"===skillModifier.modifierType&&!isToken)for(j=0;j<skillModifier.effects.length;j++)scaling=skillModifier.effects[j],new_card.isInFaction(scaling.y)&&(new_card[skillModifier.scaledStat]+=Math.ceil(getStatBeforeRunes(new_card,scaling.base)*scaling.mult))}else for(var j=0;j<skillModifier.effects.length;j++){var scaling=skillModifier.effects[j];if(new_card.isInFaction(scaling.y)){var mult=scaling.mult,plusAttack=Math.ceil(new_card.attack*mult);new_card.attack+=plusAttack;var plusHealth=Math.ceil(new_card.health*mult);new_card.health+=plusHealth,scaleSkills(new_card,original_skills,mult)}}}}(card,original_skills,skillModifiers,isToken),skillMult&&scaleSkills(card,original_skills,skillMult),skillApi.copySkills(card,original_skills),card}}(),makeBattleground=((Battleground=function(name,original_skills,mult){this.name=name,skillApi.copySkills(this,[original_skills],mult)}).prototype={p:null,name:null,runes:[],isCommander:function(){return!1},isAssault:function(){return!1},resetTimers:function(){for(var i=0,len=this.skillTimers.length;i<len;i++)this.skillTimers[i].countdown=0}},function(name,skill,mult){return new Battleground(name,skill,mult)});return api}),define("unitInfoHelper",["cardApi"],function(cardApi){"use strict";function makeUnitInfo(id,level,runes){var unit={id:Number(id),level:Number(level),runes:[]};return runes&&(unit.runes=runes),unit}function getRuneID(unit){return unit.runes.length&&unit.runes[0].id||0}return{areEqual:function(unitInfo1,unitInfo2){return!unitInfo1==!unitInfo2&&unitInfo1.id===unitInfo2.id&&unitInfo1.level===unitInfo2.level&&getRuneID(unitInfo1)===getRuneID(unitInfo2)},getEnhancement:function(unit,s,base){var enhancements=unit.enhanced,enhanced=enhancements&&enhancements[s]||0;enhanced<0&&(enhanced=Math.ceil(base*-enhanced));return enhanced},initializeUnit:function(unit,p,newKey){unit.owner=p,unit.timer=unit.cost,unit.health_left=unit.health,cardApi.applyDefaultStatuses(unit),unit.key=newKey,unit.reusableSkills||unit.resetTimers()},isImbued:function(unit,skillID,i){var imbueSkillsKey;switch(SKILL_DATA[skillID].type){case"flurry":case"toggle":return unit.imbued[skillID];case"passive":return unit[skillID]===unit.imbued[skillID];case"onDeath":imbueSkillsKey="onDeathSkills";break;case"earlyActivation":imbueSkillsKey="earlyActivationSkills";break;case"activation":default:imbueSkillsKey="skill"}return void 0!==unit.imbued[imbueSkillsKey]&&i>=unit.imbued[imbueSkillsKey]},create:makeUnitInfo,defaultCommander:makeUnitInfo(202,1)}}),define("cardUI",["cardApi","cardInfo","runeApi","factions","unitInfoHelper"],function(cardApi,cardInfo,runeApi,factions,unitInfoHelper){"use strict";var assetsRoot="";function deckToHtml(deck,noblanks,battlegrounds){var cards=[],commander=cardApi.byId(deck.commander);cards.push(cardToHtml(commander,!1,!1));for(var i=0,len=deck.deck.length;i<len;i++){var deckEntry=deck.deck[i];if(battlegrounds)var unit=cardApi.byIdWithBgeApplied(deckEntry,battlegrounds);else unit=cardApi.byId(deckEntry);cards.push(cardToHtml(unit,!1,!1))}if(!noblanks)for(;i<15;i++)cards.push(createDiv("card blank"));return cards}function cardListToHtml(list,showCompactSkills,skip,end){var htmlCard,lastUnit;skip=skip||0;for(var multiplier=1,uniqueCard=0,cards=[],i=0,len=list.length;i<len&&(!end||uniqueCard<end);i++){var listEntry=list[i],unit=cardApi.byId(listEntry);unitInfoHelper.areEqual(unit,lastUnit)?multiplier++:(skip<=uniqueCard&&(addMult(htmlCard,multiplier),(htmlCard=cardToHtml(unit,showCompactSkills,!(multiplier=1))).setAttribute("data-i",i),void 0!==listEntry.index&&htmlCard.setAttribute("data-index",listEntry.index),cards.push(htmlCard)),lastUnit=unit,uniqueCard++)}return addMult(htmlCard,multiplier),cards}function doDisplayField(field,drawableHand,callback,turn,activeUnit){drawableHand||(drawableHand=[]);var fieldHTML=[];if(turn){var htmlTurnCounter=document.createElement("h1");htmlTurnCounter.innerHTML="Turn: "+turn+" (Currently at "+SIMULATOR.calculatePoints(!0)+" points)",fieldHTML.push(htmlTurnCounter)}var divField=createDiv("field"),activePlayerUnit=null,activeCpuUnit=null;return activeUnit&&("player"===(activeUnit=activeUnit.isCommander()?-1:activeUnit.key).owner?activePlayerUnit=activeUnit:activeCpuUnit=activeUnit),divField.appendChild(displayField(field.cpu,activePlayerUnit)),divField.appendChild(displayField(field.player,activeCpuUnit)),fieldHTML.push(divField),fieldHTML.push(function(hand,callback,state){for(var cards=createDiv("float-left hand"),cardIndex=0,len=hand.length;cardIndex<len;cardIndex++){var unit=hand[cardIndex];if(unit){var htmlCard=cardToHtml(unit,!1);0===cardIndex?htmlCard.classList.add("left"):2===cardIndex?htmlCard.classList.add("right"):2<cardIndex&&htmlCard.classList.add("inactive"),callback&&htmlCard.addEventListener("click",function(cardIndex){return function(){callback(state,cardIndex)}}(cardIndex)),cards.appendChild(htmlCard)}}return cards}(drawableHand,callback,turn)),fieldHTML.push(document.createElement("br")),fieldHTML.push(document.createElement("br")),fieldHTML}function displayField(field,activeUnit){var cards=createDiv("float-left"),htmlCard=cardToHtml(field.commander,!1,!0);-1===activeUnit&&highlightCard(htmlCard),cards.appendChild(htmlCard);var units=field.assaults;if(units)for(var i=0,len=units.length;i<len;i++){var unit=units[i];htmlCard=cardToHtml(unit,!1,!0);unit.timer&&htmlCard.classList.add("inactive"),activeUnit===i&&highlightCard(htmlCard),cards.appendChild(htmlCard)}return cards}function highlightCard(htmlCard){htmlCard.style.outline="5px solid LawnGreen"}function addMult(htmlCard,multiplier){if(1<multiplier){var multDiv=createDiv("multiplier","x"+multiplier);multDiv.setAttribute("data-count",multiplier);var multIcon=createImg(getAssetPath("cardAssets")+"multiplier.png","multiplier");htmlCard.appendChild(multIcon),htmlCard.appendChild(multDiv)}}function cardToHtml(card,showCompactSkills,onField){var htmlCard=createDiv("card");htmlCard.setAttribute("data-id",card.id),htmlCard.setAttribute("data-level",card.level);for(var runes=card.runes,runeIDs=[],boosts={},i=0,len=runes.length;i<len;i++){var runeID=runes[i].id;runeIDs.push(runes[i].id);var rune=runeApi.getRune(runeID);for(var key in rune.stat_boost)"skill"===key&&(key=rune.stat_boost.skill.id),boosts[key]=!0}var highlighted=card.highlighted;if(highlighted)for(i=0;i<highlighted.length;i++){boosts[key=highlighted[i]]=!0}htmlCard.setAttribute("data-runeids",runeIDs.join(","));var picture=cardInfo.loadCard(card.id).picture;if(picture){var icon=document.createElement("i");0===picture.indexOf("portrait_")?icon.className="portrait portrait-"+picture:icon.className="sprite sprite-"+picture,htmlCard.appendChild(icon)}card.isCommander()&&htmlCard.classList.add("commander"),htmlCard.classList.add(factions.names[card.type].toLowerCase());var divName=createDiv("card-name",(void 0!==card.uid?"("+card.uid+") ":"")+card.name),divID=createDiv("card-id","("+card.id+")");if(divName.appendChild(divID),htmlCard.appendChild(divName),!card.isCommander()){if(0<=card.attack){if(onField){card.isUnjammed()||htmlCard.classList.add("frozen");var htmlAttack=createDiv("card-attack",card.adjustedAttack().toString());card.adjustedAttack()>card.attack?htmlAttack.classList.add("increased"):card.adjustedAttack()<card.attack?htmlAttack.classList.add("decreased"):boosts.attack&&htmlAttack.classList.add("increased")}else htmlAttack=createDiv("card-attack",card.attack.toString());htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Attack.png","attack")),htmlCard.appendChild(htmlAttack)}0<=card.cost&&(onField?card.timer&&(htmlCard.appendChild(createDiv("delay",card.timer)),htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Timer.png","timer"))):(htmlCard.appendChild(createDiv("delay",card.cost)),htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Timer.png","timer"))))}if(0<=card.health){if(onField){var htmlHealth=createDiv("card-health",card.health_left.toString());card.health_left<card.health?htmlHealth.classList.add("decreased"):boosts.health&&htmlHealth.classList.add("increased")}else{htmlHealth=createDiv("card-health",card.health.toString());boosts.health&&htmlHealth.classList.add("increased")}htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Health.png","health")),htmlCard.appendChild(htmlHealth)}var divSkills=createDiv("card-skills"),skillsShort=createDiv("card-skills-short");card.earlyActivationSkills&&getSkillsHtml(card,divSkills,skillsShort,card.earlyActivationSkills,onField),getSkillsHtml(card,divSkills,skillsShort,card.skill,onField),card.onDeathSkills&&getSkillsHtml(card,divSkills,skillsShort,card.onDeathSkills,onField),function(divSkills,skillsShort,card,onField,boosts){Object.getOwnPropertyNames(SKILL_DATA).filter(function(skillID){return 0<=["passive","toggle"].indexOf(SKILL_DATA[skillID].type)}).forEach(function(skill){!function(divSkills,skillsShort,onField,card,skillName,boosts){var value=card[skillName];if(value){var skill={id:skillName,x:value,boosted:boosts[skillName]};divSkills.appendChild(getSkillHtml(card,skill,onField)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(skill.id))}}(divSkills,skillsShort,onField,card,skill,boosts)});var flurry=card.flurry;flurry&&(divSkills.appendChild(getSkillHtml(card,flurry,onField)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(flurry.id)))}(divSkills,skillsShort,card,onField,boosts);var set,setName,skillsDetail=divSkills.cloneNode(!0);if(skillsDetail.className="card-skills-detailed",skillsShort.hasChildNodes()&&(showCompactSkills?(htmlCard.appendChild(skillsShort),htmlCard.appendChild(divSkills)):htmlCard.appendChild(skillsDetail)),htmlCard.appendChild(createDiv("faction")),onField){var statuses=function(card){var debuffs=[];if(card.enfeebled){var status=createStatus("enfeeble",card.enfeebled);debuffs.push(status)}if(card.marked){var status=createStatus("enfeeble",card.marked);debuffs.push(status)}if(card.nullified){var status=createStatus("nullify",card.nullified);debuffs.push(status)}if(card.poisoned){var status=createStatus("poison",card.poisoned);debuffs.push(status)}if(card.scorched&&card.scorched.amount){var status=createStatus("burn",card.scorched.amount);debuffs.push(status)}var buffs=[];if(card.enraged){var status=createStatus("enrage",card.enraged);debuffs.push(status)}if(card.protected){var status=createStatus("protect",card.protected);buffs.push(status)}if(card.invisible){var status=createStatus("evade",card.invisible);buffs.push(status)}var statuses=[];if(0<debuffs.length){for(var divDebuffs=createDiv("card-debuffs"),i=0,len=debuffs.length;i<len;i++)divDebuffs.appendChild(debuffs[i]);statuses.push(divDebuffs)}if(0<buffs.length){for(var divBuffs=createDiv("card-buffs"),i=0,len=buffs.length;i<len;i++)divBuffs.appendChild(buffs[i]);statuses.push(divBuffs)}return statuses}(card);if(0<statuses.length){htmlCard.appendChild(createDiv("hidden","..."));var divStatuses=createDiv("card-statuses");for(i=0;i<statuses.length;i++){var status=statuses[i];divStatuses.appendChild(status)}htmlCard.appendChild(divStatuses)}}if(card.set){var htmlSet=(set=card.set,setName=setNames[set],createImg(getAssetPath("cardAssets")+setName+".png"));htmlSet.className="set",htmlCard.appendChild(htmlSet)}var subFactions=card.sub_type;if(subFactions.length){var subFactionsDiv=createDiv("subfaction");for(i=0;i<subFactions.length;i++){var subFactionID=subFactions[i];if(subFactionID){var htmlSubfaction=getFactionIcon(subFactionID);subFactionsDiv.appendChild(htmlSubfaction)}}htmlCard.appendChild(subFactionsDiv)}if(0<card.rarity){if(card.maxLevel>Number(card.rarity)+2)var htmlLevel=createImg(getAssetPath("cardAssets")+"Level_"+card.rarity+"_"+card.maxLevel+"_"+card.level+".png");else htmlLevel=createImg(getAssetPath("cardAssets")+"Level_"+card.rarity+"_"+card.level+".png");if(htmlLevel.className="level",9999<card.id){var fusion="1"===card.id.toString()[0]?"Dualfuse":"Quadfuse";(fusion=createImg(getAssetPath("cardAssets")+fusion+".png")).className="fusion",htmlCard.appendChild(fusion)}htmlCard.appendChild(htmlLevel)}else if(1<card.maxLevel){(htmlLevel=createImg(getAssetPath("cardAssets")+card.maxLevel+"_"+card.level+".png")).className="level",htmlCard.appendChild(htmlLevel)}return htmlCard}function getSkillsHtml(card,divSkills,skillsShort,skills,onField){for(var i=0;i<skills.length;i++){var skill=skills[i];divSkills.appendChild(getSkillHtml(card,skill,onField,i)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(skill.id))}}function getSkillHtml(card,skill,onField,i){var htmlSkill=document.createElement("span");htmlSkill.className="skill",htmlSkill.appendChild(getSkillIcon(skill.id));var imbued=unitInfoHelper.isImbued(card,skill.id,i),enhancement=unitInfoHelper.getEnhancement(card,skill.id,skill.x);imbued?htmlSkill.classList.add("imbued"):(skill.boosted||enhancement)&&htmlSkill.classList.add("increased"),skill.all&&(htmlSkill.innerHTML+=" All "),skill.y&&htmlSkill.appendChild(getFactionIcon(skill.y)),skill.s&&htmlSkill.appendChild(getSkillIcon(skill.s));var x=(0|skill.x)+enhancement;return x&&(htmlSkill.innerHTML+=" "+x+" "),skill.c&&(htmlSkill.innerHTML+=skill.c,onField&&(htmlSkill.innerHTML+=" ("+(skill.countdown?skill.countdown:"0")+")")),htmlSkill}function getSkillIcon(skillID){var src=getAssetPath("skills"),skillData=SKILL_DATA[skillID],icon=createImg(src+=(skillData?skillData.icon:skillID)+".png");switch(skillID){case"weakenself":case"enlarge":icon.classList.add("affect-self")}return icon.title=skillData?skillData.name:skillID,icon}function createStatus(name,value){var spanStatus=document.createElement("span");return spanStatus.appendChild(getSkillIcon(name)),value&&(spanStatus.innerHTML+=value),spanStatus}function getFactionIcon(factionID){var factionName=factions.names[factionID];return createImg(getAssetPath("factions")+factionName+".png")}function getAssetPath(subpath){return assetsRoot+"res/"+subpath+"/"}function createImg(src,className){return $("<img>").addClass(className).attr("src",src)[0]}function createDiv(className,value){return $("<div>").addClass(className).html(value)[0]}var setNames={1e3:"Basic",1100:"Legacy",7e3:"Basic",2e3:"Reward",2100:"Reward",3e3:"Premium",4e3:"BoxOnly",5e3:"Champion",5100:"Champion",9999:"StoryElements"},api={clearCardSpace:function(){$("#cardSpace").empty()},clearDeckSpace:function(){document.getElementById("deck").innerHTML=""},displayDeck:function(deck,noblanks){var $deck=$("#deck");return $deck.children().remove(),$deck.append(deckToHtml(deck,noblanks)),$deck},cardToHtml:cardToHtml,deckToHtml:deckToHtml,displayCardList:function(list,compactSkills,skip,end){var cards=cardListToHtml(list,compactSkills,skip,end),$cardSpace=$("#cardSpace");return $cardSpace.empty(),$cardSpace.append(cards),$cardSpace},displayCards:function(field){var fieldHTML=doDisplayField(field);$("#cardSpace").children().remove().end().append(fieldHTML)},doDisplayField:doDisplayField,displayInventory:function(deck){var cards=cardListToHtml(deck.deck),$cardSpace=$("#deck");return $cardSpace.children().remove(),$cardSpace.append(cardListToHtml([deck.commander])).append(cards),$cardSpace}};return Object.defineProperties(api,{assetsRoot:{get:function(){return assetsRoot},set:function(value){assetsRoot=value}}}),api}),define("base64",["cardInfo","unitInfoHelper"],function(cardInfo,unitInfoHelper){"use strict";var api={encodeHash:function(deck){var base64Units=[];deck.commander&&base64Units.push(deck.commander);return base64Units.concat(deck.deck).map(unitInfoToBase64).join("")},decodeHash:function(hash){for(var unit,current_deck={deck:[]},i=0;i<hash.length;i+=5){var unitHash=hash.substr(i,5);(unit=base64ToUnitInfo(unitHash))&&(cardInfo.loadCard(unit.id)?!current_deck.commander&&cardInfo.isCommander(unit.id)?current_deck.commander=unit:current_deck.deck.push(unit):console.log("Could not decode '"+unitHash+"' ("+unit.id+")"))}current_deck.commander||(current_deck.commander=unitInfoHelper.defaultCommander);return current_deck},fromDecimal:decimalToBase64,toDecimal:base64ToDecimal,fromUnitInfo:unitInfoToBase64},base64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!~",noFusionInHash={};for(var id in CARDS)if(id<1e4){var fusion=FUSIONS[id];(!fusion||Number(fusion)<1e4)&&(noFusionInHash[id]=!0)}var maxRuneID=1e3;function unitInfoToBase64(unit){var baseID=parseInt(unit.id),level=parseInt(unit.level)-1;if(noFusionInHash[baseID]){var fusion=Math.floor(level/7);level=level%7}else{fusion=Math.floor(baseID/1e4);baseID%=1e4}var runeID=0;unit.runes.length&&(runeID=parseInt(unit.runes[0].id),runeID%=5e3);var dec=baseID;return decimalToBase64(dec=(dec=7*(dec=3*dec+fusion)+level)*maxRuneID+runeID,5)}function base64ToUnitInfo(base64){var dec=base64ToDecimal(base64),runeID=dec%maxRuneID,level=(dec=(dec-runeID)/maxRuneID)%7,fusion=(dec=(dec-level++)/7)%3,unitID=dec=(dec-fusion)/3;noFusionInHash[unitID]?level+=7*fusion:0<fusion&&(unitID=Number(fusion+""+unitID));var unit=unitInfoHelper.create(unitID,level);return 0<runeID&&unit.runes.push({id:runeID+5e3}),unit}function decimalToBase64(dec,len){for(var base64="",i=0;i<len;i++){var part=dec%64;base64+=base64chars[part],dec=(dec-part)/64}return base64}function base64ToDecimal(base64){for(var dec=0,i=base64.length-1;0<=i;i--){dec*=64,dec+=base64chars.indexOf(base64[i])}return dec}return api});
//# sourceMappingURL=shared.min.js.map